{"version":3,"sources":["components/Box.js","components/Grid.js","App.js","serviceWorker.js","index.js"],"names":["Box","props","className","boxClass","id","onClick","selectBox","row","col","Grid","width","cols","rowsArr","i","rows","j","boxId","gridFull","push","key","boxid","style","arrayClone","arr","JSON","parse","stringify","App","useState","Array","fill","map","setGridFull","generations","setGenerations","running","setRunning","speed","setSpeed","formData","setFormData","seed","gridCopy","Math","floor","random","play","a","g","g2","count","useEffect","setTimeout","disabled","step","name","value","onChange","e","target","handleChange","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.a2bc0564.chunk.js","sourcesContent":["import React from \"react\"\r\n\r\nconst Box = (props) => {\r\n  const selectBox = () => {\r\n    props.selectBox(props.row, props.col)\r\n  }\r\n  return(\r\n  <div\r\n    className={props.boxClass}\r\n    id={props.id}\r\n    onClick={selectBox}\r\n  />\r\n  )\r\n}\r\nexport default Box","import React from \"react\"\r\nimport Box from \"./Box\"\r\n\r\nconst Grid = (props) => {\r\n  const width = props.cols * 16\r\n  var rowsArr = []\r\n\r\n  var boxClass = \"\";\r\n  for (var i = 0; i < props.rows; i++){\r\n    for (var j = 0; j < props.cols; j++){\r\n      let boxId = i + \"_\" + j;\r\n      boxClass = props.gridFull[i][j] ? \"box on\" : \"box off\";\r\n      rowsArr.push(\r\n        <Box \r\n          boxClass={boxClass}\r\n          key={boxId}\r\n          boxid={boxId}\r\n          row={i}\r\n          col={j}\r\n          selectBox={props.selectBox}\r\n        />\r\n      )\r\n    }\r\n  }\r\n\r\n\r\n  return(\r\n    <div className=\"grid\" style={{width: width}}>\r\n      {rowsArr}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Grid","import React, {useState, useEffect, useCallback} from 'react';\nimport './App.css';\nimport Grid from \"./components/Grid\"\n\nfunction App() {\n  const rows = 30\n  const cols = 50\n  const [gridFull, setGridFull] = useState(Array(rows).fill().map(() => Array(cols).fill(false)))\n  const [generations, setGenerations] = useState(0)\n\n  const [running, setRunning] = useState(false)\n  const [speed, setSpeed] = useState(100)\n  const [formData, setFormData] = useState({speed: 100})\n\n  const selectBox = (row, col) => {\n    if (running){\n      return\n    }\n    let gridCopy = arrayClone(gridFull)\n    gridCopy[row][col] = !gridCopy[row][col]\n    setGridFull(gridCopy)\n  }\n\n  const playButton = () => {\n    setRunning(!running)\n  }\n\n  const clearButton = () => {\n    setGridFull(Array(rows).fill().map(() => Array(cols).fill(false)))\n    setGenerations(0)\n  }\n\n\n  const randomButton = () => {\n    seed()\n  }\n\n  const seed = () => {\n    let gridCopy = arrayClone(gridFull)\n    for (let i = 0; i < rows; i++){\n      for (let j = 0; j < cols; j++){\n        if (Math.floor(Math.random() * 4) === 1) {\n          gridCopy[i][j] = true\n        }\n      }\n    }\n    setGridFull(gridCopy)\n  }\n  const step = () => {\n    let g = gridFull\n    let g2 = arrayClone(gridFull) // my buffer\n    \n    for (var i = 0; i < rows; i++){\n      for (var j = 0; j < cols; j++){\n        let count = 0 // will count how meny live tiles for given gridbox\n        if (i > 0) if (g[i - 1][j]) count++ // top\n        if (i > 0 && j > 0) if (g[i - 1][j - 1]) count++ //top left\n        if (i > 0 && j < cols - 1) if (g[i - 1][j + 1]) count++ // top right\n        if (j < cols - 1) if (g[i][j + 1]) count++ //right\n        if (j > 0) if (g[i][j - 1]) count++ //left\n        if (i < rows - 1 ) if (g[i + 1][j]) count++ //bottom\n        if (i < rows - 1 && j > 0) if (g[i + 1][j - 1]) count++ //bottom left\n        if (i < rows - 1 && j < cols - 1) if (g[i + 1][j + 1]) count++ //bottom right\n        if (g[i][j] && (count < 2 || count > 3)) g2[i][j] = false\n        if (!g[i][j] && count === 3) g2[i][j] = true\n    \n      }\n    }\n    \n    setGenerations(g => g + 1)\n    setGridFull(g2)\n    return\n  }\n  \n  \n  const play = async () => {\n    if (!running){\n      return\n    }\n    let g = gridFull\n    let g2 = arrayClone(gridFull) // my buffer\n    \n    for (var i = 0; i < rows; i++){\n      for (var j = 0; j < cols; j++){\n        let count = 0 // will count how meny live tiles for given gridbox\n        if (i > 0) if (g[i - 1][j]) count++ // top\n        if (i > 0 && j > 0) if (g[i - 1][j - 1]) count++ //top left\n        if (i > 0 && j < cols - 1) if (g[i - 1][j + 1]) count++ // top right\n        if (j < cols - 1) if (g[i][j + 1]) count++ //right\n        if (j > 0) if (g[i][j - 1]) count++ //left\n        if (i < rows - 1 ) if (g[i + 1][j]) count++ //bottom\n        if (i < rows - 1 && j > 0) if (g[i + 1][j - 1]) count++ //bottom left\n        if (i < rows - 1 && j < cols - 1) if (g[i + 1][j + 1]) count++ //bottom right\n        if (g[i][j] && (count < 2 || count > 3)) g2[i][j] = false\n        if (!g[i][j] && count === 3) g2[i][j] = true\n    \n      }\n    }\n    \n    setGenerations(g => g + 1)\n    setGridFull(g2)\n    return\n  }\n    \n  useEffect(() => {\n    if (running) {\n      setTimeout(() => play(), speed)\n    }else{\n      return\n    }\n  }, [gridFull, running])\n\n  const handleChange = e => {\n    setFormData({...formData, [e.target.name]: e.target.value})\n  }\n\n  return (\n    <div className=\"App\">\n      <h1>Conways Game Of Life</h1>\n      <div className=\"center\">\n        <button onClick={playButton}>\n        {running ? \"stop\" : \"start\"}\n        </button>\n      \n      <button disabled={running} onClick={clearButton}>clear</button>\n      <button disabled={running} onClick={randomButton}>Random</button>\n      <button disabled={running} onClick={() => step()}>step</button>\n      <button onClick={() => setSpeed(formData.speed)}>Set Speed(milsec)</button>\n      <input name=\"speed\" value={formData.speed} onChange={e => handleChange(e)}/>\n      </div>\n      \n      <Grid\n        cols={cols}\n        gridFull={gridFull}\n        rows={rows}\n        selectBox={selectBox}\n        />\n      <h2>Generations: {generations}</h2>\n      <div className=\"center\">\n      <h3>Rules</h3>\n      <p>1. Any live cell with fewer than two live neighbours dies, as if by underpopulation.</p>\n      <p>2. Any live cell with two or three live neighbours lives on to the next generation.</p>\n      <p>3. Any live cell with more than three live neighbours dies, as if by overpopulation.</p>\n      <p>4. Any dead cell with exactly three live neighbours becomes a live cell, as if by reproduction.</p>\n      </div>\n    </div>\n  );\n}\n\nfunction arrayClone(arr) {\n  return JSON.parse(JSON.stringify(arr))\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}